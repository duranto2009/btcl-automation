package application;

import common.RequestFailureException;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public enum ApplicationState {
    //    DUMMY_STATE(0);
    VPN_SUBMITTED(7001),
    VPN_PRECHECK_DONE(7002),
    VPN_REJECTED(7003),
    VPN_REQUESTED_TO_CENTRAL(7004),
    VPN_APPROVE_AND_FORWARD(7005),
    VPN_RESPONDED_TO_CENTRAL(7006),
    VPN_GIVE_WORK_ORDER(7007),
    VPN_JOB_DONE(7008),
    VPN_FORWARD_FOR_WORK_ORDER(7009),
    VPN_EFR_WIP(7010),
    VPN_EFR_DONE(7011),
    VPN_PAYMENT_DONE(7012),
    VPN_PAYMENT_VERIFIED(7013),
    VPN_WORK_DONE(7014),
    //    VPN_TESTING_PENDING	(7015),
    VPN_ADVICE_NOTE_PUBLISH(7016),
    VPN_IFR_SUBMITTED(7017),
    VPN_IFR_RESPONDED(7018),
    VPN_EFR_REQUESTED(7019),
    VPN_DEMAND_NOTE_GENERATED(7020),
    VPN_REQUEST_FOR_ACCOUNT_CC(7021),
    VPN_REQUESTED_CLIENT_FOR_CORRECTION(7022),
    VPN_ACCOUNT_CC_POSITIVE(7023),
    VPN_ACCOUNT_CC_NEGETIVE(7024),
    VPN_GENERATE_WORK_ORDER(7025),
    VPN_TESTING_DONE(7026),
    VPN_CONNECTION_COMPLETE(7027),
    VPN_APPLICATION_REOPEN(7028),
    VPN_FORWARD_TO_MUX_TEAM(7029),
    VPN_MUX_CONFIGURE_DONE(7030),
    VPN_IFR_2_REQUESTED(7031),
    VPN_IFR_2_RESPONDED(7032),
    VPN_EFR_2_REQUESTED(7033),
    VPN_EFR_2_RESPONDED(7034),
    VPN_REQUESTED_TO_LOCAL(7035),
    VPN_MOVE_BACK_TO_ORIGINAL(7036),
    VPN_IFR_2_INCOMPLETE(7037),
    VPN_WITHOUT_LOOP_SUBMITTED(7038),
    VPN_WITHOUT_LOOP_IFR_REQUEST(7039),
    VPN_WITHOUT_LOOP_REQUESTED_CLIENT_FOR_CORRECTION(7040),
    VPN_WITHOUT_LOOP_REJECTED(7041),
    VPN_WITHOUT_LOOP_REQUEST_FOR_ACCOUNT_CC(7042),
    VPN_WITHOUT_LOOP_IFR_RESPONSE(7043),
    VPN_WITHOUT_LOOP_CLIENT_CORRECTION_SUBMITTED(7044),
    VPN_WITHOUT_LOOP_ACCOUNT_CC_POSITIVE(7045),
    VPN_WITHOUT_LOOP_ACCOUNT_CC_NEGETIVE(7046),
    VPN_WITHOUT_LOOP_DEMAND_NOTE_GENERATED(7047),
    VPN_WITHOUT_LOOP_REQUESTED_TO_CENTRAL(7048),
    VPN_WITHOUT_LOOP_REQUESTED_TO_LOCAL(7049),
    VPN_WITHOUT_LOOP_IFR_2_REQUESTED(7050),
    VPN_WITHOUT_LOOP_IFR_2_RESPONDED(7051),
    VPN_WITHOUT_LOOP_IFR_2_INCOMPLETE(7052),
    VPN_WITHOUT_LOOP_RESPONDED_TO_CENTRAL(7053),
    VPN_WITHOUT_LOOP_MOVE_BACK_TO_ORIGINAL(7054),
    VPN_WITHOUT_LOOP_PAYMENT_DONE(7055),
    VPN_WITHOUT_LOOP_PAYMENT_VERIFIED(7056),
    VPN_WITHOUT_LOOP_ADVICE_NOTE_PUBLISH(7057),
    VPN_WITHOUT_LOOP_TESTING_COMPLETE(7058),
    VPN_WITHOUT_LOOP_FORWARD_TO_MUX_TEAM(7059),
    VPN_WITHOUT_LOOP_CONNECTION_COMPLETE(7060),
    VPN_WITHOUT_LOOP_APPLICATION_REOPEN(7061),
    VPN_WITHOUT_LOOP_MUX_DONE(7062),
    //VPN_VPN_WITHOUT_LOOP_RESPONDED_TO_CENTRAL(	7063),
    VPN_COMPLETE_TESTING_AND_CREATE_CONNECTION(7064),
    VPN_DEMAND_NOTE_SKIP(7065),
    VPN_WITHOUT_LOOP_DEMAND_NOTE_SKIP(7066),
    VPN_FORWARD_LDGM_FOR_LOOP(7067),
    VPN_FORWARD_LDGM_EFR_REQUEST_FOR_LOOP(7068),
    VPN_FORWARD_LDGM_RESPONSE_EXTERNAL_FR(7069),
    VPN_FORWARD_LDGM_SELECT_EXTERNAL_FR(7070),
    VPN_SELECT_EXTERNAL_FR(7071),
    VPN_WORK_ORDER_APPROVE(7072),
    VPN_APPROVE_SR_COLLABORATION(7073),
    VPN_REJECT_SR_COLLABORATION(7074),
    VPN_REJECT_LOOP_DISTANCE(7075),

    VPN_APPLY_LOOP_DISTANCE_APPROVAL(7076),
    VPN_APPROVE_FORWARDED_SR_COLLABORATION(7077),
    VPN_REJECT_FORWARDED_SR_COLLABORATION(7078),
    VPN_LDGM_REJECT_LOOP_DISTANCE(7079),
    VPN_FORWARD_APPLY_LOOP_DISTANCE_APPROVAL(7080),
    VPN_VPN_DEMAND_NOTE_GENERATED_SKIP(6019),

    //downgrade
    VPN_DOWNGRADE_APPLICATION_SUBMITTED(7601),
    VPN_DOWNGRADE_APPLICATION_REQUEST_CLIENT_FOR_CORRECTION(7602),
    VPN_DOWNGRADE_APPLICATION_REQUEST_ACCOUNT_FOR_CC(7603),
    VPN_DOWNGRADE_APPLICATION_REJECTED(7604),
    VPN_DOWNGRADE_APPLICATION_ADVICE_NOTE_PUBLISH(7605),
    VPN_DOWNGRADE_APPLICATION_CLIENT_CORRECTION_SUBMITTED(7606),
    VPN_DOWNGRADE_APPLICATION_ACCOUNT_CC_POSITIVE(7607),
    VPN_DOWNGRADE_APPLICATION_ACCOUNT_CC_NEGATIVE(7608),
    VPN_DOWNGRADE_APPLICATION_APPLICATION_REOPEN(7609),
    VPN_DOWNGRADE_APPLICATION_TESTING_DONE(7610),

    //region revise application state
    VPN_TD_APPLICATION_SUBMITTED(7500),
    VPN_TD_APPLICATION_REJECTED(7509),
    //VPN_TD_APPLICATION_REJECTED_CLOSE(7501),
    VPN_TD_APPLICATION_ADVICE_NOTE_PUBLISH(7501),
    VPN_TD_APPLICATION_CONNECTION_COMPLETE(7502),
    //VPN_TD_APPLICATION_APPROVE_BY_ADMIN(7503),


    VPN_RECONNECT_APPLICATION_SUBMITTED(7503),
    VPN_RECONNECT_APPLICATION_REJECTED(7510),
    VPN_RECONNECT_APPLICATION_DEMAND_NOTE_GENERATED(7504),
    VPN_RECONNECT_APPLICATION_PAYMENT_DONE(7505),
    VPN_RECONNECT_APPLICATION_PAYMENT_VERIFIED(7506),
    VPN_RECONNECT_APPLICATION_ADVICE_NOTE_PUBLISH(7507),
    VPN_RECONNECT_APPLICATION_CONNECTION_COMPLETE(7508),
    //VPN_RECONNECT_APPLICATION_APPROVE_BY_ADMIN(7503) ;

    //endregion

    //region owner change
    VPN_OC_APPLICATION_SUBMITTED(500),
    VPN_OC_APPLICATION_REJECTED(501),
    VPN_OC_APPLICATION_REOPENED(502),
    VPN_OC_CORRECTION(503),
    VPN_OC_CORRECTION_DONE(504),
    VPN_OC_REQUEST_FOR_CC(505),
    VPN_OC_AC_CC_POSITIVE(506),
    VPN_OC_AC_CC_NEGETIVE(507),
    VPN_OC_FORWARD_TO_DST(508),
    VPN_OC_DST_POSITIVE(509),
    VPN_OC_DST_NEGETIVE(515),
    VPN_OC_DN_GENERATED(510),
    VPN_OC_PAYMENT_DONE(511),
    VPN_OC_PAYMENT_VERIFIED(512),
    VPN_OC_ADVICE_NOTE_PUBLISH(513),
    VPN_OC_COMPLETE(514),
    VPN_OC_FORWARD_TO_SRC(516),
    VPN_OC_APP_RECHECK(517),


    VPN_UPGRADE_APPLICATION_SUBMITTED(7701),


    //start: upstream
    UPSTREAM_FORWARDED_TO_GM_DATA_AND_INTERNET(50002),
    UPSTREAM_APPROVED_AND_FORWARDED_TO_CGM_OVERSEAS(50003),
    UPSTREAM_APPROVED_AND_FORWARDED_TO_GM_INTERNATIONAL(50004),
    UPSTREAM_APPROVED_VENDOR_AND_FORWARDED_TO_DGM_CORE_UPSTREAM(50005),
    UPSTREAM_CONNECTION_COMPLETE(50006),
    UPSTREAM_REQUESTED_DGM_CORE_UPSTREAM_FOR_CORRECTION(50007),
    UPSTREAM_PRECHECK_DONE(50008),
    UPSTREAM_REJECTED(50009),
    UPSTREAM_APPLICATION_REOPENED(50010),
    //end: upstream

    //region close
    VPN_CLOSE_APPLICATION_SUBMITTED(7800),
    CLOSE_APPLICATION_REJCTED(7801),
    CLOSE_APPLICATION_REOPENED(7802),
    CLOSE_CHECK_CC(7803),
    CLOSE_CC_POSITIVE(7804),
    CLOSE_CC_NEGETIVE(7805),
    CLOSE_RQST_CORRECTION(7806),
    CLOSE_CORRECTION_DONE(7807),
    CLOSE_ADVICE_NOTE(7808),
    CLOSE_COMPLETE(7809),
    //vpn close when loop reuse is considered
    CLOSE_WITH_LOOP_SUBMITTED(7850),
    CLOSE_WITH_LOOP_REJCTED(7851),
    CLOSE_WITH_LOOP_REOPENED(7852),
    CLOSE_WITH_LOOP_CHECK_CC(7853),
    CLOSE_WITH_LOOP_CC_POSITIVE(7854),
    CLOSE_WITH_LOOP_CC_NEGETIVE(7855),
    CLOSE_WITH_LOOP_RQST_CORRECTION(7856),
    CLOSE_WITH_LOOP_CORRECTION_DONE(7857),
    CLOSE_FORWARD_TO_LDGM(7858),
    CLOSE_WO(7859),
    CLOSE_WO_DONE(7860),
    CLOSE_WO_BY_LDGM(7861),
    CLOSE_WO_RES_TO_LDGM(7862),
    CLOSE_FORWARD_TO_CDGM(7863),
    SERVER_ROOM_REJECT(7864),
    SERVER_ROOM_ACCEPT(7865),
    SERVER_ROOM_REJECT_FLOW(7866),
    SERVER_ROOM_ACCEPT_FLOW(7867),
   //endregion close
    // VPN_OC_APP_RECHECK_BACK(518);

    //region ASN application
    ASN_SUBMITTED(8000),
    REQUEST_REJECT(8001),
    REQUEST_ACCEPT(8002),
    //endregion

    //endregion
    APPLICATION_CLOSED_DUE_TO_FINAL_BILL_GENERATION(100000),
    INVALID(-1);






    private int state;

    ApplicationState(int state) {
        this.state = state;
    }

    public static ApplicationState getApplicationStateByStateId(int state) {
        List<ApplicationState> list = Arrays.stream(ApplicationState.values())
                .filter(t -> t.getState() == state)
                .collect(Collectors.toList());

        if (list.isEmpty()) {

//            ApplicationState applicationState = new ApplicationState(0);
//            return applicationState;
            throw new RequestFailureException("No Application State Found with State Id: " + state);
        } else if (list.size() > 1) {
            throw new RequestFailureException("Multiple Application States Found with State Id: " + state);
        }
        return list.get(0);
    }

    public static List<ApplicationState> getApplicationStatesByStateIds(List<Integer> ids) {
        Map<Integer, ApplicationState> map = Arrays.stream(ApplicationState.values())
                                    .collect(Collectors.toMap(ApplicationState::getState, Function.identity()));

        return ids.stream()
                .map(t->map.getOrDefault(t, ApplicationState.INVALID))
                .collect(Collectors.toList());
    }

    public int getState() {
        return this.state;
    }

    public static boolean isPriorVPNDemandNoteState(ApplicationState applicationState) {
        return applicationState ==  ApplicationState.VPN_SELECT_EXTERNAL_FR
                || applicationState ==  ApplicationState.VPN_WITHOUT_LOOP_IFR_RESPONSE
                || applicationState ==  ApplicationState.VPN_FORWARD_LDGM_SELECT_EXTERNAL_FR
                || applicationState == ApplicationState.VPN_RECONNECT_APPLICATION_SUBMITTED
                || applicationState == ApplicationState.VPN_OC_DST_POSITIVE
                ;
    }
}
